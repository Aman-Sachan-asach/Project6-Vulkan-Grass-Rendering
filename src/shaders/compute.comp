#version 450
#extension GL_ARB_separate_shader_objects : enable

#define GRAVITY -9.8
#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// Add bindings for:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// input
layout(set = 2, binding = 0) buffer InputBlades {
    Blade inputBlades[];
};

// output
layout(set = 2, binding = 1) buffer CulledBlades {
    Blade culledBlades[];
};

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
// layout(set = ???, binding = ???) buffer NumBlades {
// 	  uint vertexCount;   // Write the number of blades remaining here
// 	  uint instanceCount; // = 1
// 	  uint firstVertex;   // = 0
// 	  uint firstInstance; // = 0
// } numBlades;

layout(set = 2, binding = 2) buffer NumBlades {
    uint vertexCount;
	uint instanceCount;
	uint firstVertex;
	uint firstInstance;
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

void main() 
{
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) 
	{
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

	uint index = gl_GlobalInvocationID.x;
	Blade blade = inputBlades[index];
	
	// blade parameters
	vec3 v0 = blade.v0.xyz;
	vec3 v1 = blade.v1.xyz;
	vec3 v2 = blade.v2.xyz;
	vec3 up = blade.up.xyz;

	float angle = blade.v0.w; // orientation of the blade of grass; 
							  // if this angle is zero the thin width portion (non-flat portion) of the grass is facing +ve x.
	float height = blade.v1.w;
	float width = blade.v2.w;
	float stiffness = blade.up.w;

	vec3 side_direction = vec3(cos(angle), 0.0, sin(angle));
	vec3 front_direction = cross(up, side_direction);

    // Apply Natural Forces on every blade
	// Recovery Force
	vec3 initial_v2 = v1;
	vec3 recovery = (initial_v2 - v2)*stiffness;

	// Gravity Force
	vec3 gE = vec3(0.0, GRAVITY, 0.0); //Environmental Gravity
	vec3 gF = 0.25 * GRAVITY * front_direction; //Front Gravity
	vec3 gravity = vec3(0.0, 0.0, 0.0); //Total Gravitational Force
	
	// Wind Force
	//vec3 windDirection = normalize(vec3(1, 0, 0)); // straight wave
	vec3 windDirection = -normalize(v0); // helicopter wave

	float windStrength = 10.0 * cos(4.0 * totalTime + length(v0)) + 10.0 * (1.0 + rand(v0.xz));

	float fd = 1.0 - abs(dot(wind_dir, normalize(v2 - v0)));
	float fr = dot(v2 - v0, up) / h;
	float theta = fd * fr;

	vec3 wind = windStrength * windDirection * theta;
	
	// Resulting Translation due to forces over delta time
	vec3 translation_dt = (recovery + wind + gravity) * deltaTime;

	v2 += translation_dt;

	// State Validation

	v2 = v2 - up * min(dot(up, (v2-v0)), 0.0f);

	// Cull Blades



	// Atomic operation to read and update numBlades.vertexCount is required because the compute shader is 
	// parallezied over the number of grass blades, ie two threads could try to update the numBlades.vertexCount 
	// at the same time.
	// You want to write the visible blades to the buffer without write conflicts between threads
	
	culledBlades[atomicAdd(numBlades.vertexCount, 1)] = inputBlades[index];
}